plugins {
	id 'org.springframework.boot' version '2.7.11'
	id 'org.sonarqube' version '3.3'
	id 'jacoco'
	id 'nu.studer.jooq' version '7.1'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'

group = 'com.FitnessApp'
version = '1.0-SNAPSHOT'

sourceCompatibility = 17
targetCompatibility = 17

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.5"
	}
}

dependencies {
	// Database driver for jOOQ
	jooqGenerator "org.postgresql:postgresql"

	// Lombok
	compileOnly "org.projectlombok:lombok"
	annotationProcessor "org.projectlombok:lombok"

	// Spring dependencies
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	runtimeOnly "org.springframework.boot:spring-boot-starter-validation"
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf"

	implementation("com.squareup.okhttp3:okhttp:4.9.3")
	implementation("com.google.code.gson:gson:2.8.9")

	// Database dependencies
	implementation "org.springframework.boot:spring-boot-starter-jdbc"
	implementation "com.zaxxer:HikariCP"
	implementation "org.liquibase:liquibase-core"
	implementation "org.jooq:jooq"
	runtimeOnly "org.postgresql:postgresql"
}

jacocoTestReport {
	executionData.setFrom(fileTree("$buildDir/jacoco/").include("**.exec"))
	classDirectories.setFrom(files(project.sourceSets.main.output))

	reports {
		html.required = true
		xml.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: 'co/tide/com.fitnessapp/db/jooq/**')
		}))
	}
}

sourceSets {
	main {
		resources {
			srcDirs = ['src/main/resources']
		}
	}
}

bootRun {
	// The profile can be passed as ./gradlew clean bootRun -Dspring.profiles.active=dev
	systemProperties['spring.profiles.active']=project.gradle.startParameter.systemPropertiesArgs['spring.profiles.active']
}

task jooqGen {
	dependsOn += 'generateJooq'
}

jooq {
	configurations{
		main {
			// We don't want jOOQ to run on every compile.
			generateSchemaSourceOnCompilation = false
			generationTool{
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://127.0.0.1:5432/fitness_app'
					user = 'postgres'
					password = ''
					properties {
						property {
							// No need for SSL on localhost when generating sources, so it's ok to suppress the warnings
							key = 'useSSL'
							value = 'false'
						}
					}
				}

				generator {
					name = 'org.jooq.codegen.DefaultGenerator'

					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'public'
						outputSchemaToDefault = true
						excludes = 'DATABASECHANGELOG|DATABASECHANGELOGLOCK'
					}

					generate {
						relations = false
						deprecated = false
						records = true
						pojos = true
						daos = true
						springAnnotations = true
						javaTimeTypes = true
						fluentSetters = true
						pojosEqualsAndHashCode = true
						constructorPropertiesAnnotation = true
						generatedAnnotation = true
					}

					target {
						packageName = 'co.tide.com.fitnessapp.db.jooq'
						directory = 'src/generated-db-entities/java/'
					}
				}
			}
		}
	}
}
