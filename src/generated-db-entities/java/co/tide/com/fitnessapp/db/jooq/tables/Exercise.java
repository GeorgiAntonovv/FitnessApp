/*
 * This file is generated by jOOQ.
 */
package co.tide.com.fitnessapp.db.jooq.tables;


import co.tide.com.fitnessapp.db.jooq.DefaultSchema;
import co.tide.com.fitnessapp.db.jooq.Keys;
import co.tide.com.fitnessapp.db.jooq.tables.records.ExerciseRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Exercise extends TableImpl<ExerciseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>exercise</code>
     */
    public static final Exercise EXERCISE = new Exercise();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExerciseRecord> getRecordType() {
        return ExerciseRecord.class;
    }

    /**
     * The column <code>exercise.id</code>.
     */
    public final TableField<ExerciseRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>exercise.workout_id</code>.
     */
    public final TableField<ExerciseRecord, UUID> WORKOUT_ID = createField(DSL.name("workout_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>exercise.exercise_name</code>.
     */
    public final TableField<ExerciseRecord, String> EXERCISE_NAME = createField(DSL.name("exercise_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>exercise.sets</code>.
     */
    public final TableField<ExerciseRecord, String> SETS = createField(DSL.name("sets"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>exercise.reps</code>.
     */
    public final TableField<ExerciseRecord, String> REPS = createField(DSL.name("reps"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>exercise.notes</code>.
     */
    public final TableField<ExerciseRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>exercise.created_on</code>.
     */
    public final TableField<ExerciseRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>exercise.updated_on</code>.
     */
    public final TableField<ExerciseRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    private Exercise(Name alias, Table<ExerciseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Exercise(Name alias, Table<ExerciseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>exercise</code> table reference
     */
    public Exercise(String alias) {
        this(DSL.name(alias), EXERCISE);
    }

    /**
     * Create an aliased <code>exercise</code> table reference
     */
    public Exercise(Name alias) {
        this(alias, EXERCISE);
    }

    /**
     * Create a <code>exercise</code> table reference
     */
    public Exercise() {
        this(DSL.name("exercise"), null);
    }

    public <O extends Record> Exercise(Table<O> child, ForeignKey<O, ExerciseRecord> key) {
        super(child, key, EXERCISE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ExerciseRecord> getPrimaryKey() {
        return Keys.EXERCISE_PKEY;
    }

    @Override
    public List<UniqueKey<ExerciseRecord>> getKeys() {
        return Arrays.<UniqueKey<ExerciseRecord>>asList(Keys.EXERCISE_PKEY);
    }

    @Override
    public List<ForeignKey<ExerciseRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExerciseRecord, ?>>asList(Keys.EXERCISE__FK_EXERCISE_WORKOUT);
    }

    private transient Workout _workout;

    public Workout workout() {
        if (_workout == null)
            _workout = new Workout(this, Keys.EXERCISE__FK_EXERCISE_WORKOUT);

        return _workout;
    }

    @Override
    public Exercise as(String alias) {
        return new Exercise(DSL.name(alias), this);
    }

    @Override
    public Exercise as(Name alias) {
        return new Exercise(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Exercise rename(String name) {
        return new Exercise(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exercise rename(Name name) {
        return new Exercise(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
