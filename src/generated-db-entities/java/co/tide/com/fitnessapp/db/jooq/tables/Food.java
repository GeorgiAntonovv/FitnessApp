/*
 * This file is generated by jOOQ.
 */
package co.tide.com.fitnessapp.db.jooq.tables;


import co.tide.com.fitnessapp.db.jooq.DefaultSchema;
import co.tide.com.fitnessapp.db.jooq.Keys;
import co.tide.com.fitnessapp.db.jooq.tables.records.FoodRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Food extends TableImpl<FoodRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>food</code>
     */
    public static final Food FOOD = new Food();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FoodRecord> getRecordType() {
        return FoodRecord.class;
    }

    /**
     * The column <code>food.id</code>.
     */
    public final TableField<FoodRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>food.meal_id</code>.
     */
    public final TableField<FoodRecord, UUID> MEAL_ID = createField(DSL.name("meal_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>food.food_name</code>.
     */
    public final TableField<FoodRecord, String> FOOD_NAME = createField(DSL.name("food_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>food.calories</code>.
     */
    public final TableField<FoodRecord, Integer> CALORIES = createField(DSL.name("calories"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>food.protein</code>.
     */
    public final TableField<FoodRecord, Integer> PROTEIN = createField(DSL.name("protein"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>food.fats</code>.
     */
    public final TableField<FoodRecord, Integer> FATS = createField(DSL.name("fats"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>food.carbs</code>.
     */
    public final TableField<FoodRecord, Integer> CARBS = createField(DSL.name("carbs"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>food.created_on</code>.
     */
    public final TableField<FoodRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>food.updated_on</code>.
     */
    public final TableField<FoodRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    private Food(Name alias, Table<FoodRecord> aliased) {
        this(alias, aliased, null);
    }

    private Food(Name alias, Table<FoodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>food</code> table reference
     */
    public Food(String alias) {
        this(DSL.name(alias), FOOD);
    }

    /**
     * Create an aliased <code>food</code> table reference
     */
    public Food(Name alias) {
        this(alias, FOOD);
    }

    /**
     * Create a <code>food</code> table reference
     */
    public Food() {
        this(DSL.name("food"), null);
    }

    public <O extends Record> Food(Table<O> child, ForeignKey<O, FoodRecord> key) {
        super(child, key, FOOD);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<FoodRecord> getPrimaryKey() {
        return Keys.FOOD_PKEY;
    }

    @Override
    public List<UniqueKey<FoodRecord>> getKeys() {
        return Arrays.<UniqueKey<FoodRecord>>asList(Keys.FOOD_PKEY);
    }

    @Override
    public List<ForeignKey<FoodRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FoodRecord, ?>>asList(Keys.FOOD__FK_FOOD_MEAL);
    }

    private transient Meal _meal;

    public Meal meal() {
        if (_meal == null)
            _meal = new Meal(this, Keys.FOOD__FK_FOOD_MEAL);

        return _meal;
    }

    @Override
    public Food as(String alias) {
        return new Food(DSL.name(alias), this);
    }

    @Override
    public Food as(Name alias) {
        return new Food(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Food rename(String name) {
        return new Food(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Food rename(Name name) {
        return new Food(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, UUID, String, Integer, Integer, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
